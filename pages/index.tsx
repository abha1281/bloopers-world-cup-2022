import { GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import { sampleMatches, sampleWinners } from "../sampleData";
import { Player } from "../types/types";
import "slick-carousel/slick/slick.css"; 
import "slick-carousel/slick/slick-theme.css";
import Slider from "react-slick";
import { useRef } from "react";
import axios from "axios";

type Props = {
  tableData: any[];
  fixtures: any[]
};

const fields = [
  {
    display: "Score",
    field: "score",
  },
];

export default function Home({ tableData, fixtures }: Props) {
  console.log(tableData)
  return (
    <div className="min-h-screen">
      <Head>
        <title>Bloopers World Cup 2022</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <div className="mx-auto container py-10">
        <h1 className="text-6xl font-bold text-center">
          Bloopers World Cup 2022
        </h1>
        <div className="grid grid-cols-3 gap-x-4 mt-10">
          <div className="space-y-2">
            <h2 className="font-semibold text-4xl text-center">Matches</h2>
            <div className="grid gap-4">
              {fixtures.map(match => (
                <MatchCard key={match.id} {...match} />
              ))}
            </div>
          </div>
          <div className="overflow-x-hidden col-span-2">
            <Carousel images={sampleWinners} />
          </div>
        </div>
        <Table fields={fields} data={tableData} />
      </div>
    </div>
  );
}

type Team = {
  country: string;
  goals: string;
  name: string;
  penalties: string;
}

type MatchesProps = {
  group: string;
  venue: string;
  datetime: string;
  time: string;
  home_team: Team;
  away_team: Team;
};

const MatchCard = ({ group, datetime, time, home_team, away_team, venue }: MatchesProps) => {
  const when = new Date(datetime)
  
  const getFlag = async (name: string) => {
    const url = "https://countryflagsapi.com/png/"

    const response = await axios.get(`${url}/Switzerland`)
    if (response.status === 200) {
      return `${url}/Switzerland`
    }
  }

  return (
    <div className="p-4 rounded-lg space-y-1 bg border bg-gray-100">
      <div className="flex justify-between items-center text-xs space-y-1 ">
        <p className="text-xs">{venue}</p>
        <p>{`${when.toLocaleDateString()} ${when.toLocaleTimeString()}`}</p>
      </div>
      <div className="flex justify-between items-center">
        <div className="grid gap-1">
          <div className="flex items-center gap-x-1">
            <Image
              src={`https://countryflagsapi.com/png/${home_team.country}`}
              alt={home_team.country}
              width={40}
              height={32}
              className="object-cover w-auto h-auto"
            />
            <div className="flex items-center gap-x-1">
              <p className="">{home_team.name}</p>
              <p className="font-medium">{home_team.goals}</p>
            </div>
          </div>
          <div className="flex items-center gap-x-1">
            <Image
              src={`https://countryflagsapi.com/png/${away_team.country}`}
              alt={away_team.country}
              width={40}
              height={32}
              className="object-cover w-auto h-auto"
            />
             <div className="flex items-center gap-x-1">
              <p className="">{away_team.name}</p>
              <p className="font-medium">{away_team.goals}</p>
            </div>
          </div>
        </div>
        <p className="font-medium">{time}</p>
      </div>
    </div>
  );
};

type CarouselTypes = {
  images: Player[];
};

const Carousel = ({ images }: CarouselTypes) => {
  const sliderRef = useRef<Slider | null>(null);

  const settings = {
    speed: 250,
    slidesToShow: 1,
    slidesToScroll: 1,
  };
  return (
    <div className="w-full">
      <Slider ref={sliderRef} {...settings}>
        {images.map(image => (
          <div key={image.id} className="flex justify-center itesm-center">
             <Image
              src={image.profile_image}
              alt="framer"
              className="object-cover z-10 mx-auto"
              width={565}
              height={0}
            />
          </div>
        ))}
      </Slider>
    </div>
  );
};

type TableProps = {
  fields: {
    display: string;
    field: string;
  }[];
  customFields?: {
    field: string;
    element: (itemField: any, index: number) => void;
  }[];
  data: any[];
};

const Table = ({ fields, customFields, data }: TableProps) => {
  return (
    <div className="ring-1 ring-gray-300 my-4 p-4 rounded-lg w-1/2">
      {data.length > 0 ? (
        <table className="w-full">
          <thead className="">
            <tr className="">
              <th className="font-medium sticky bg-white top-0 py-3.5 px-3 text-left w-12 border-b border-gray-300">
                Ranking
              </th>
              <th className="font-medium sticky bg-white top-0 py-3.5 px-3 text-left border-b border-gray-300">
                Name
              </th>
              {fields.map((field, index) => (
                <th
                  key={`field-${index}`}
                  className="font-medium sticky bg-white top-0 py-3.5 px-3 text-left border-b border-gray-300"
                >
                  {field.display}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-300">
            {data.map((item, rowIndex) => (
              <tr key={`row-${rowIndex}`} className="group">
                <td className="py-3.5 px-3  text-sm font-medium text-left">
                  <p className="rounded-full border-2 h-8 w-8 mx-auto flex justify-center items-center">
                    {rowIndex + 1}
                  </p>
                </td>
                <td className="py-3.5 px-3 text-sm font-medium text-left">
                  <div className="flex">
                    <p className="">{item.name}</p>
                    {item.image ? (
                      <Image
                        src={item.image}
                        width={16}
                        height={16}
                        alt={item.name}
                      />
                    ) : null}
                  </div>
                </td>
                {fields.map((field, index) => {
                  const hasCustomField = customFields
                    ? customFields.find(
                        customField => customField.field === field.field
                      )
                    : undefined;
                  return (
                    <td
                      key={`td-${index}`}
                      className="py-3.5 px-3  text-sm font-medium text-left"
                    >
                      {!hasCustomField
                        ? item[field.field]
                        : hasCustomField.element(item[field.field], index)}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      ) : null}
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  const tableRes = await fetch("https://keepthescore.co/api/gcxzugpegbr/board/");
  const tableData = await tableRes.json();

  const fixtureRes = await fetch("https://worldcupjson.net/matches/today");
  const fixtureData = await fixtureRes.json()

  return {
    props: {
      tableData: tableData.players,
      fixtures: fixtureData
    },
  };
};